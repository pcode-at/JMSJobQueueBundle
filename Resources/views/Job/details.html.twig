{% extends "@JMSJobQueue/base.html.twig" %}
{% import "@JMSJobQueue/Job/macros.html.twig" as macros %}

{% block title %}Job "{{ job.command }}" (ID: {{ job.id }})" - {{ parent() }}{% endblock %}

{% block stylesheets %}
    <style type="text/css">
        {% deprecated 'The template "' ~ _self ~'" is deprecated since Symfony 4.4, will be removed in 5.0.' %}
        {# This file is based on WebProfilerBundle/Resources/views/Profiler/profiler.css.twig.
           If you make any change in this file, verify the same change is needed in the other file. #}
        :root {
            --font-sans-serif: Helvetica, Arial, sans-serif;
            --page-background: #f9f9f9;
            --color-text: #222;
            /* when updating any of these colors, do the same in toolbar.css.twig */
            --color-success: #4f805d;
            --color-warning: #a46a1f;
            --color-error: #b0413e;
            --color-muted: #999;
            --tab-background: #fff;
            --tab-color: #444;
            --tab-active-background: #666;
            --tab-active-color: #fafafa;
            --tab-disabled-background: #f5f5f5;
            --tab-disabled-color: #999;
            --metric-value-background: #fff;
            --metric-value-color: inherit;
            --metric-unit-color: #999;
            --metric-label-background: #e0e0e0;
            --metric-label-color: inherit;
            --table-border: #e0e0e0;
            --table-background: #fff;
            --table-header: #e0e0e0;
            --tree-active-background: #F7E5A1;
            --exception-title-color: var(--base-2);
            --shadow: 0px 0px 1px rgba(128, 128, 128, .2);
            --border: 1px solid #e0e0e0;
            --background-error: var(--color-error);
            --trace-selected-background: #F7E5A1;
            --highlight-comment: #969896;
            --highlight-default: #222222;
            --highlight-keyword: #a71d5d;
            --highlight-string: #183691;
            --base-0: #fff;
            --base-1: #f5f5f5;
            --base-2: #e0e0e0;
            --base-3: #ccc;
            --base-4: #666;
            --base-5: #444;
            --base-6: #222;
        }

        html{font-family:sans-serif;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{margin:.67em 0;font-size:2em}mark{color:#000;background:#ff0}small{font-size:80%}sub,sup{position:relative;font-size:75%;line-height:0;vertical-align:baseline}sup{top:-.5em}sub{bottom:-.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{height:0;-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{margin:0;font:inherit;color:inherit}button{overflow:visible}button,select{text-transform:none}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{padding:0;border:0}input{line-height:normal}input[type="checkbox"],input[type="radio"]{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;padding:0}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button{height:auto}input[type="search"]{-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;-webkit-appearance:textfield}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}fieldset{padding:.35em .625em .75em;margin:0 2px;border:1px solid silver}legend{padding:0;border:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-spacing:0;border-collapse:collapse}td,th{padding:0}

        html {
            /* always display the vertical scrollbar to avoid jumps when toggling contents */
            overflow-y: scroll;
        }
        body { background-color: #F9F9F9; color: var(--base-6); font: 14px/1.4 Helvetica, Arial, sans-serif; padding-bottom: 45px; }

        a { cursor: pointer; text-decoration: none; }
        a:hover { text-decoration: underline; }
        abbr[title] { border-bottom: none; cursor: help; text-decoration: none; }

        code, pre { font: 13px/1.5 Consolas, Monaco, Menlo, "Ubuntu Mono", "Liberation Mono", monospace; }

        table, tr, th, td { background: #FFF; border-collapse: collapse; vertical-align: top; }
        table { background: #FFF; border: var(--border); box-shadow: 0px 0px 1px rgba(128, 128, 128, .2); margin: 1em 0; width: 100%; }
        table th, table td { border: solid var(--base-2); border-width: 1px 0; padding: 8px 10px; }
        table th { background-color: var(--base-2); font-weight: bold; text-align: left; }

        .m-t-5 { margin-top: 5px; }
        .hidden-xs-down { display: none; }
        .block { display: block; }
        .full-width { width: 100%; }
        .hidden { display: none; }
        .prewrap { white-space: pre-wrap; }
        .nowrap { white-space: nowrap; }
        .newline { display: block; }
        .break-long-words { word-wrap: break-word; overflow-wrap: break-word; -webkit-hyphens: auto; -moz-hyphens: auto; hyphens: auto; min-width: 0; }
        .text-small { font-size: 12px !important; }
        .text-muted { color: #999; }
        .text-bold { font-weight: bold; }
        .empty { border: 4px dashed var(--base-2); color: #999; margin: 1em 0; padding: .5em 2em; }

        .status-success { background: rgba(94, 151, 110, 0.3); }
        .status-warning { background: rgba(240, 181, 24, 0.3); }
        .status-error { background: rgba(176, 65, 62, 0.2); }
        .status-success td, .status-warning td, .status-error td { background: transparent; }
        tr.status-error td, tr.status-warning td { border-bottom: 1px solid #FAFAFA; border-top: 1px solid #FAFAFA; }
        .status-warning .colored { color: #A46A1F; }
        .status-error .colored  { color: var(--color-error); }

        .sf-toggle { cursor: pointer; }
        .sf-toggle-content { -moz-transition: display .25s ease; -webkit-transition: display .25s ease; transition: display .25s ease; }
        .sf-toggle-content.sf-toggle-hidden { display: none; }
        .sf-toggle-content.sf-toggle-visible { display: block; }
        thead.sf-toggle-content.sf-toggle-visible, tbody.sf-toggle-content.sf-toggle-visible { display: table-row-group; }
        .sf-toggle-off .icon-close, .sf-toggle-on .icon-open { display: none; }
        .sf-toggle-off .icon-open, .sf-toggle-on .icon-close { display: block; }

        .tab-navigation { margin: 0 0 1em 0; padding: 0; }
        .tab-navigation li { background: var(--tab-background); border: 1px solid var(--table-border); color: var(--tab-color); cursor: pointer; display: inline-block; font-size: 16px; margin: 0 0 0 -1px; padding: .5em .75em; z-index: 1; }
        .tab-navigation li .badge { background-color: var(--base-1); color: var(--base-4); display: inline-block; font-size: 14px; font-weight: bold; margin-left: 8px; min-width: 10px; padding: 1px 6px; text-align: center; white-space: nowrap; }
        .tab-navigation li.disabled { background: var(--tab-disabled-background); color: var(--tab-disabled-color); }
        .tab-navigation li.active { background: var(--tab-active-background); color: var(--tab-active-color); z-index: 1100; }
        .tab-navigation li.active .badge { background-color: var(--base-5); color: var(--base-2); }
        .tab-content > *:first-child { margin-top: 0; }
        .tab-navigation li .badge.status-warning { background: var(--color-warning); color: #FFF; }
        .tab-navigation li .badge.status-error { background: var(--background-error); color: #FFF; }
        .sf-tabs .tab:not(:first-child) { display: none; }

        [data-filters] { position: relative; }
        [data-filtered] { cursor: pointer; }
        [data-filtered]:after { content: '\00a0\25BE'; }
        [data-filtered]:hover .filter-list li { display: inline-flex; }
        [class*="filter-hidden-"] { display: none; }
        .filter-list { position: absolute; border: var(--border); box-shadow: var(--shadow); margin: 0; padding: 0; display: flex; flex-direction: column; }
        .filter-list :after { content: ''; }
        .filter-list li {
            background: var(--tab-disabled-background);
            border-bottom: var(--border);
            color: var(--tab-disabled-color);
            display: none;
            list-style: none;
            margin: 0;
            padding: 5px 10px;
            text-align: left;
            font-weight: normal;
        }
        .filter-list li.active {
            background: var(--tab-background);
            color: var(--tab-color);
        }
        .filter-list li.last-active {
            background: var(--tab-active-background);
            color: var(--tab-active-color);
        }

        .filter-list-level li { cursor: s-resize; }
        .filter-list-level li.active { cursor: n-resize; }
        .filter-list-level li.last-active { cursor: default; }
        .filter-list-level li.last-active:before { content: '\2714\00a0'; }
        .filter-list-choice li:before { content: '\2714\00a0'; color: transparent; }
        .filter-list-choice li.active:before { color: unset; }

        .container { max-width: 1024px; margin: 0 auto; padding: 0 15px; }
        .container::after { content: ""; display: table; clear: both; }

        header { background-color: var(--base-6); color: rgba(255, 255, 255, 0.75); font-size: 13px; height: 33px; line-height: 33px; padding: 0; }
        header .container { display: flex; justify-content: space-between; }
        .logo { flex: 1; font-size: 13px; font-weight: normal; margin: 0; padding: 0; }
        .logo svg { height: 18px; width: 18px; opacity: .8; vertical-align: -5px; }

        .help-link { margin-left: 15px; }
        .help-link a { color: inherit; }
        .help-link .icon svg { height: 15px; width: 15px; opacity: .7; vertical-align: -2px; }
        .help-link a:hover { color: #EEE; text-decoration: none; }
        .help-link a:hover svg { opacity: .9; }

        .exception-summary { background: var(--background-error); border-bottom: 2px solid rgba(0, 0, 0, 0.1); border-top: 1px solid rgba(0, 0, 0, .3); flex: 0 0 auto; margin-bottom: 15px; }
        .exception-metadata { background: rgba(0, 0, 0, 0.1); padding: 7px 0; }
        .exception-metadata .container { display: flex; flex-direction: row; justify-content: space-between; }
        .exception-metadata h2, .exception-metadata h2 > a { color: rgba(255, 255, 255, 0.8); font-size: 13px; font-weight: 400; margin: 0; }
        .exception-http small { font-size: 13px; opacity: .7; }
        .exception-hierarchy { flex: 1; }
        .exception-hierarchy .icon { margin: 0 3px; opacity: .7; }
        .exception-hierarchy .icon svg { height: 13px; width: 13px; vertical-align: -2px; }

        .exception-without-message .exception-message-wrapper { display: none; }
        .exception-message-wrapper .container { display: flex; align-items: flex-start; min-height: 70px; padding: 10px 15px 8px; }
        .exception-message { flex-grow: 1; }
        .exception-message, .exception-message a { color: #FFF; font-size: 21px; font-weight: 400; margin: 0; }
        .exception-message.long { font-size: 18px; }
        .exception-message a { border-bottom: 1px solid rgba(255, 255, 255, 0.5); font-size: inherit; text-decoration: none; }
        .exception-message a:hover { border-bottom-color: #ffffff; }

        .exception-illustration { flex-basis: 111px; flex-shrink: 0; height: 66px; margin-left: 15px; opacity: .7; }

        .trace + .trace { margin-top: 30px; }
        .trace-head { background-color: var(--base-2); padding: 10px; position: relative; }
        .trace-head .trace-class { color: var(--base-6); font-size: 18px; font-weight: bold; line-height: 1.3; margin: 0; position: relative; }
        .trace-head .trace-namespace { color: #999; display: block; font-size: 13px; }
        .trace-head .icon { position: absolute; right: 0; top: 0; }
        .trace-head .icon svg { height: 24px; width: 24px; }

        .trace-details { background: var(--base-0); border: var(--border); box-shadow: 0px 0px 1px rgba(128, 128, 128, .2); margin: 1em 0; table-layout: fixed; }

        .trace-message { font-size: 14px; font-weight: normal; margin: .5em 0 0; }

        .trace-line { position: relative; padding-top: 8px; padding-bottom: 8px; }
        .trace-line + .trace-line { border-top: var(--border); }
        .trace-line:hover { background: var(--base-1); }
        .trace-line a { color: var(--base-6); }
        .trace-line .icon { opacity: .4; position: absolute; left: 10px; top: 11px; }
        .trace-line .icon svg { height: 16px; width: 16px; }
        .trace-line-header { padding-left: 36px; padding-right: 10px; }

        .trace-file-path, .trace-file-path a { color: var(--base-6); font-size: 13px; }
        .trace-class { color: var(--color-error); }
        .trace-type { padding: 0 2px; }
        .trace-method { color: var(--color-error); font-weight: bold; }
        .trace-arguments { color: #777; font-weight: normal; padding-left: 2px; }

        .trace-code { background: var(--base-0); font-size: 12px; margin: 10px 10px 2px 10px; padding: 10px; overflow-x: auto; white-space: nowrap; }
        .trace-code ol { margin: 0; float: left; }
        .trace-code li { color: #969896; margin: 0; padding-left: 10px; float: left; width: 100%; }
        .trace-code li + li { margin-top: 5px; }
        .trace-code li.selected { background: var(--trace-selected-background); margin-top: 2px; }
        .trace-code li code { color: var(--base-6); white-space: nowrap; }

        .trace-as-text .stacktrace { line-height: 1.8; margin: 0 0 15px; white-space: pre-wrap; }

        @media (min-width: 575px) {
            .hidden-xs-down { display: initial; }
            .help-link { margin-left: 30px; }
        }

        .trace-code {
            padding-left:30px;
        }
    </style>
{% endblock %}

{% block content %}
<ul class="breadcrumb">
    <li><a href="{{ path("jms_jobs_overview") }}">Jobs</a> <span class="divider">/</span></li>
    <li class="active">Job "{{ job.command }}"</li>
</ul>

<div class="page-header">
    <h1>Job "{{ job.command }}" <small>(ID: {{ job.id }})</small></h1>
</div>

<table class="table table-bordered table-striped">
    <tr>
        <th width="20%">Command</th>
        <td>{{ macros.command(job, true) }}</td>
    </tr>
    <tr>
        <th>State</th>
        <td>{{ macros.state(job) }}</td>
    </tr>
    {% if job.workerName %}
    <tr>
        <th>WorkerName</th>
        <td>{{ job.workerName }}</td>
    </tr>
    {% endif %}
    <tr>
        <th>Queue</th>
        <td>{{ macros.queue(job) }}</td>
    </tr>
    <tr>
        <th>Created</th>
        <td>{{ macros.ago(job.createdAt) }}</td>
    </tr>
    {% if job.closedAt %}
    <tr>
        <th>Runtime</th>
        <td>{{ macros.runtime(job) }}</td>
    </tr>
    <tr>
        <th>Closed</th>
        <td>{{ macros.ago(job.closedAt) }}</td>
    </tr>
    {% endif %}
    {% if job.isRetryJob() %}
    <tr>
        <th>Original Job</th>
        <td><a href="{{ path("jms_jobs_details", {"id": job.originalJob.id}) }}">#{{ job.originalJob.id }}</a> {{ macros.state(job.originalJob) }}</td>
    </tr>
    {% endif %}
    {% if relatedEntities|length > 0 %}
    <tr>
        <th>Related Entities</th>
        <td>
            {%- for entity in relatedEntities %}
                {%- if entity.raw is jms_job_queue_linkable -%}
                    <a href="{{ jms_job_queue_path(entity.raw) }}">{{ entity.raw|jms_job_queue_linkname }}</a>
                {%- else -%}
                    {{ entity.class }} ({{ entity.id }})
                {%- endif -%}
                {% if not loop.last %}, {% endif -%}
            {% endfor -%}
        </td>
    </tr>
    {% endif %}
    {% if job.dependencies|length > 0 %}
    <tr>
        <th>Dependencies</th>
        <td>
            {%- for dep in job.dependencies -%}
                <a href="{{ path("jms_jobs_details", {"id": dep.id}) }}" title="{{ dep.command }}{% for arg in dep.args %} {{ arg }}{% endfor %} (ID {{ dep.id }})">{{ dep.command }}</a> {{ macros.state(dep) }}
                {%- if not loop.last %}, {% endif -%}
            {%- endfor -%}
    </tr>
    {% endif %}
    {% if incomingDependencies|length > 0 %}
    <tr>
        <th>Incoming Dependencies</th>
        <td>
            {%- for dep in incomingDependencies -%}
                <a href="{{ path("jms_jobs_details", {"id": dep.id}) }}" title="{{ dep.command }}{% for arg in dep.args %} {{ arg }}{% endfor %} (ID {{ dep.id }})">{{ dep.command }}</a> {{ macros.state(dep) }}
            {%- endfor -%}
        </td>
    </tr>
    {% endif %}
</table>

{% if job.retryJobs|length > 0 %}
<h3>Retry Jobs</h3>

<table class="table table-bordered table-striped table-condensed">
    <thead>
        <tr>
            <th>ID</th>
            <th>Created</th>
            <th>State</th>
        </tr>
    </thead>

    <tbody>
        {% for retryJob in job.retryJobs %}
        <tr>
            <td><a href="{{ path("jms_jobs_details", {"id": retryJob.id}) }}">{{ retryJob.id }}</a></td>
            <td>{{ macros.ago(retryJob.createdAt) }}</td>
            <td>{{ macros.state(retryJob) }}</td>
        </tr>
        {% endfor %}
    </tbody>
</table>

{% endif %}

{% if job.stackTrace is not empty %}
<h3>Stack Trace</h3>
{% for index, exception in job.stackTrace.toarray %}
    <div class="trace trace-as-html">
        <div class="trace-details">
            <div class="trace-head">
            <span class="sf-toggle" data-toggle-selector="#trace-html-{{ index }}" data-toggle-initial="{{ loop.first ? "display" }}">
                <h3 class="trace-class">
                    <span class="trace-namespace">
                        {{ exception.class|split('\\')|slice(0, -1)|join('\\') }}
                        {{- exception.class|split('\\')|length > 1 ? '\\' }}
                    </span>
                    {{ exception.class|split('\\')|last }}

                    <span class="icon icon-close"><svg width="1792" height="1792" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1344 800v64q0 14-9 23t-23 9H480q-14 0-23-9t-9-23v-64q0-14 9-23t23-9h832q14 0 23 9t9 23zm128 448V416q0-66-47-113t-113-47H480q-66 0-113 47t-47 113v832q0 66 47 113t113 47h832q66 0 113-47t47-113zm128-832v832q0 119-84.5 203.5T1312 1536H480q-119 0-203.5-84.5T192 1248V416q0-119 84.5-203.5T480 128h832q119 0 203.5 84.5T1600 416z"/></svg></span>
                    <span class="icon icon-open"><svg width="1792" height="1792" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1344 800v64q0 14-9 23t-23 9H960v352q0 14-9 23t-23 9h-64q-14 0-23-9t-9-23V896H480q-14 0-23-9t-9-23v-64q0-14 9-23t23-9h352V416q0-14 9-23t23-9h64q14 0 23 9t9 23v352h352q14 0 23 9t9 23zm128 448V416q0-66-47-113t-113-47H480q-66 0-113 47t-47 113v832q0 66 47 113t113 47h832q66 0 113-47t47-113zm128-832v832q0 119-84.5 203.5T1312 1536H480q-119 0-203.5-84.5T192 1248V416q0-119 84.5-203.5T480 128h832q119 0 203.5 84.5T1600 416z"/></svg></span>
                </h3>

                {% if exception.message is not empty and index > 1 %}
                    <p class="break-long-words trace-message">{{ exception.message }}</p>
                {% endif %}
            </span>
            </div>

            <div id="trace-html-{{ index }}" class="sf-toggle-content">
                {% set _is_first_user_code = true %}
                {% for i, trace in exception.trace %}
                    {% set _display_code_snippet = _is_first_user_code and ('/vendor/' not in trace.file) and ('/var/cache/' not in trace.file) and (trace.file is not empty) %}
                    {% if _display_code_snippet %}{% set _is_first_user_code = false %}{% endif %}
                    <div class="trace-line">
                        {% set prefix = index %}
                        <div class="trace-line-header break-long-words {{ trace.file|default(false) ? 'sf-toggle' }}" data-toggle-selector="#trace-html-{{ prefix }}-{{ i }}" data-toggle-initial="{{ style == 'expanded' ? 'display' }}">
                            {% if trace.file|default(false) %}
                                <span class="icon icon-close"><svg width="1792" height="1792" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1408 960V832q0-26-19-45t-45-19H448q-26 0-45 19t-19 45v128q0 26 19 45t45 19h896q26 0 45-19t19-45zm256-544v960q0 119-84.5 203.5T1376 1664H416q-119 0-203.5-84.5T128 1376V416q0-119 84.5-203.5T416 128h960q119 0 203.5 84.5T1664 416z"/></svg></span>
                                <span class="icon icon-open"><svg width="1792" height="1792" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1408 960V832q0-26-19-45t-45-19h-320V448q0-26-19-45t-45-19H832q-26 0-45 19t-19 45v320H448q-26 0-45 19t-19 45v128q0 26 19 45t45 19h320v320q0 26 19 45t45 19h128q26 0 45-19t19-45v-320h320q26 0 45-19t19-45zm256-544v960q0 119-84.5 203.5T1376 1664H416q-119 0-203.5-84.5T128 1376V416q0-119 84.5-203.5T416 128h960q119 0 203.5 84.5T1664 416z"/></svg></span>
                            {% endif %}

                            {% if style != 'compact' and trace.function %}
                                <span class="trace-class">{{ trace.class|abbr_class }}</span>{% if trace.type is not empty %}<span class="trace-type">{{ trace.type }}</span>{% endif %}<span class="trace-method">{{ trace.function }}</span><span class="trace-arguments">({{ trace.args|format_args }})</span>
                            {% endif %}

                            {% if trace.file|default(false) %}
                                {% set line_number = trace.line|default(1) %}
                                {% set file_link = trace.file|file_link(line_number) %}
                                {% set file_path = trace.file|format_file(line_number)|striptags|replace({ (' at line ' ~ line_number): '' }) %}
                                {% set file_path_parts = file_path|split(constant('DIRECTORY_SEPARATOR')) %}

                                <span class="block trace-file-path">
            in
            <a href="{{ file_link }}">{{ file_path_parts[:-1]|join(constant('DIRECTORY_SEPARATOR')) }}{{ constant('DIRECTORY_SEPARATOR') }}<strong>{{ file_path_parts|last }}</strong></a>
            {%- if style == 'compact' and trace.function %}<span class="trace-type">{{ trace.type }}</span><span class="trace-method">{{ trace.function }}</span>{% endif %}
            (line {{ line_number }})
        </span>
                            {% endif %}
                        </div>
                        {% if trace.file|default(false) %}
                            <div id="trace-html-{{ prefix ~ '-' ~ i }}" class="trace-code sf-toggle-content">
                                {{ trace.file|file_excerpt(trace.line, 5)|replace({
                                    '#DD0000': 'var(--highlight-string)',
                                    '#007700': 'var(--highlight-keyword)',
                                    '#0000BB': 'var(--highlight-default)',
                                    '#FF8000': 'var(--highlight-comment)'
                                })|raw }}
                            </div>
                        {% endif %}
                    </div>
                {% endfor %}
            </div>
        </div>
    </div>
{% endfor %}
{% endif %}

{% if job.output is not empty %}
<h3>Output</h3>
<pre style="max-height:300px; overflow:auto;">{{ job.output }}</pre>
{% endif %}

{% if job.errorOutput is not empty %}
<h3>Error Output</h3>
<pre style="max-height:300px; overflow:auto;">{{ job.errorOutput }}</pre>
{% endif %}

{% if job.state == 'failed' or job.errorOutput is not empty %}
<div class="alert alert-warn">
    <a href="{{ path("jms_jobs_retry_job", {"id": job.id}) }}" class="pull-right btn btn-danger">
        <i class="icon-repeat icon-white"></i>
        Retry Job
    </a>
    <p style="margin-bottom: 0; line-height: 30px">Click on the next button to create a new job to retry this failed one.</p>
</div>
{% endif %}

{% if statisticData is not empty %}
<h3>Statistics</h3>
<div id="statistics" style="width:900px; height:300px;"></div>
{% endif %}

{% endblock %}

{% block javascripts %}
    {{ parent() }}

    {% if statisticData is not empty %}
    <script type="text/javascript" src="https://www.google.com/jsapi"></script>
    <script type="text/javascript">
        google.load("visualization", "1", {packages:["corechart"]});
        google.setOnLoadCallback(function() {
            var chart = new google.visualization.LineChart($('#statistics').get(0));
            chart.draw(google.visualization.arrayToDataTable({{ statisticData|json_encode|raw }}), {{ statisticOptions|json_encode|raw }});
        });
    </script>
    {% endif %}

    {% deprecated 'The template "' ~ _self ~'" is deprecated since Symfony 4.4, will be removed in 5.0.' %}
    {# This file is based on WebProfilerBundle/Resources/views/Profiler/base_js.html.twig.
   If you make any change in this file, verify the same change is needed in the other file. #}
    <script{% if csp_script_nonce is defined and csp_script_nonce %} nonce="{{ csp_script_nonce }}"{% endif %}>/*<![CDATA[*/
        {# Caution: the contents of this file are processed by Twig before loading
                them as JavaScript source code. Always use '/*' comments instead
                of '//' comments to avoid impossible-to-debug side-effects #}

        Sfjs = (function() {
            "use strict";

            if ('classList' in document.documentElement) {
                var hasClass = function (el, cssClass) { return el.classList.contains(cssClass); };
                var removeClass = function(el, cssClass) { el.classList.remove(cssClass); };
                var addClass = function(el, cssClass) { el.classList.add(cssClass); };
                var toggleClass = function(el, cssClass) { el.classList.toggle(cssClass); };
            } else {
                var hasClass = function (el, cssClass) { return el.className.match(new RegExp('\\b' + cssClass + '\\b')); };
                var removeClass = function(el, cssClass) { el.className = el.className.replace(new RegExp('\\b' + cssClass + '\\b'), ' '); };
                var addClass = function(el, cssClass) { if (!hasClass(el, cssClass)) { el.className += " " + cssClass; } };
                var toggleClass = function(el, cssClass) { hasClass(el, cssClass) ? removeClass(el, cssClass) : addClass(el, cssClass); };
            }

            var addEventListener;

            var el = document.createElement('div');
            if (!('addEventListener' in el)) {
                addEventListener = function (element, eventName, callback) {
                    element.attachEvent('on' + eventName, callback);
                };
            } else {
                addEventListener = function (element, eventName, callback) {
                    element.addEventListener(eventName, callback, false);
                };
            }

            return {
                addEventListener: addEventListener,

                createTabs: function() {
                    var tabGroups = document.querySelectorAll('.sf-tabs:not([data-processed=true])');

                    /* create the tab navigation for each group of tabs */
                    for (var i = 0; i < tabGroups.length; i++) {
                        var tabs = tabGroups[i].querySelectorAll(':scope > .tab');
                        var tabNavigation = document.createElement('ul');
                        tabNavigation.className = 'tab-navigation';

                        var selectedTabId = 'tab-' + i + '-0'; /* select the first tab by default */
                        for (var j = 0; j < tabs.length; j++) {
                            var tabId = 'tab-' + i + '-' + j;
                            var tabTitle = tabs[j].querySelector('.tab-title').innerHTML;

                            var tabNavigationItem = document.createElement('li');
                            tabNavigationItem.setAttribute('data-tab-id', tabId);
                            if (hasClass(tabs[j], 'active')) { selectedTabId = tabId; }
                            if (hasClass(tabs[j], 'disabled')) { addClass(tabNavigationItem, 'disabled'); }
                            tabNavigationItem.innerHTML = tabTitle;
                            tabNavigation.appendChild(tabNavigationItem);

                            var tabContent = tabs[j].querySelector('.tab-content');
                            tabContent.parentElement.setAttribute('id', tabId);
                        }

                        tabGroups[i].insertBefore(tabNavigation, tabGroups[i].firstChild);
                        addClass(document.querySelector('[data-tab-id="' + selectedTabId + '"]'), 'active');
                    }

                    /* display the active tab and add the 'click' event listeners */
                    for (i = 0; i < tabGroups.length; i++) {
                        tabNavigation = tabGroups[i].querySelectorAll(':scope >.tab-navigation li');

                        for (j = 0; j < tabNavigation.length; j++) {
                            tabId = tabNavigation[j].getAttribute('data-tab-id');
                            document.getElementById(tabId).querySelector('.tab-title').className = 'hidden';

                            if (hasClass(tabNavigation[j], 'active')) {
                                document.getElementById(tabId).className = 'block';
                            } else {
                                document.getElementById(tabId).className = 'hidden';
                            }

                            tabNavigation[j].addEventListener('click', function(e) {
                                var activeTab = e.target || e.srcElement;

                                /* needed because when the tab contains HTML contents, user can click */
                                /* on any of those elements instead of their parent '<li>' element */
                                while (activeTab.tagName.toLowerCase() !== 'li') {
                                    activeTab = activeTab.parentNode;
                                }

                                /* get the full list of tabs through the parent of the active tab element */
                                var tabNavigation = activeTab.parentNode.children;
                                for (var k = 0; k < tabNavigation.length; k++) {
                                    var tabId = tabNavigation[k].getAttribute('data-tab-id');
                                    document.getElementById(tabId).className = 'hidden';
                                    removeClass(tabNavigation[k], 'active');
                                }

                                addClass(activeTab, 'active');
                                var activeTabId = activeTab.getAttribute('data-tab-id');
                                document.getElementById(activeTabId).className = 'block';
                            });
                        }

                        tabGroups[i].setAttribute('data-processed', 'true');
                    }
                },

                createToggles: function() {
                    var toggles = document.querySelectorAll('.sf-toggle:not([data-processed=true])');

                    for (var i = 0; i < toggles.length; i++) {
                        var elementSelector = toggles[i].getAttribute('data-toggle-selector');
                        var element = document.querySelector(elementSelector);

                        addClass(element, 'sf-toggle-content');

                        if (toggles[i].hasAttribute('data-toggle-initial') && toggles[i].getAttribute('data-toggle-initial') == 'display') {
                            addClass(toggles[i], 'sf-toggle-on');
                            addClass(element, 'sf-toggle-visible');
                        } else {
                            addClass(toggles[i], 'sf-toggle-off');
                            addClass(element, 'sf-toggle-hidden');
                        }

                        addEventListener(toggles[i], 'click', function(e) {
                            e.preventDefault();

                            if ('' !== window.getSelection().toString()) {
                                /* Don't do anything on text selection */
                                return;
                            }

                            var toggle = e.target || e.srcElement;

                            /* needed because when the toggle contains HTML contents, user can click */
                            /* on any of those elements instead of their parent '.sf-toggle' element */
                            while (!hasClass(toggle, 'sf-toggle')) {
                                toggle = toggle.parentNode;
                            }

                            var element = document.querySelector(toggle.getAttribute('data-toggle-selector'));

                            toggleClass(toggle, 'sf-toggle-on');
                            toggleClass(toggle, 'sf-toggle-off');
                            toggleClass(element, 'sf-toggle-hidden');
                            toggleClass(element, 'sf-toggle-visible');

                            /* the toggle doesn't change its contents when clicking on it */
                            if (!toggle.hasAttribute('data-toggle-alt-content')) {
                                return;
                            }

                            if (!toggle.hasAttribute('data-toggle-original-content')) {
                                toggle.setAttribute('data-toggle-original-content', toggle.innerHTML);
                            }

                            var currentContent = toggle.innerHTML;
                            var originalContent = toggle.getAttribute('data-toggle-original-content');
                            var altContent = toggle.getAttribute('data-toggle-alt-content');
                            toggle.innerHTML = currentContent !== altContent ? altContent : originalContent;
                        });

                        /* Prevents from disallowing clicks on links inside toggles */
                        var toggleLinks = toggles[i].querySelectorAll('a');
                        for (var j = 0; j < toggleLinks.length; j++) {
                            addEventListener(toggleLinks[j], 'click', function(e) {
                                e.stopPropagation();
                            });
                        }

                        toggles[i].setAttribute('data-processed', 'true');
                    }
                },

                createFilters: function() {
                    document.querySelectorAll('[data-filters] [data-filter]').forEach(function (filter) {
                        var filters = filter.closest('[data-filters]'),
                            type = 'choice',
                            name = filter.dataset.filter,
                            ucName = name.charAt(0).toUpperCase()+name.slice(1),
                            list = document.createElement('ul'),
                            values = filters.dataset['filter'+ucName] || filters.querySelectorAll('[data-filter-'+name+']'),
                            labels = {},
                            defaults = null,
                            indexed = {},
                            processed = {};
                        if (typeof values === 'string') {
                            type = 'level';
                            labels = values.split(',');
                            values = values.toLowerCase().split(',');
                            defaults = values.length - 1;
                        }
                        addClass(list, 'filter-list');
                        addClass(list, 'filter-list-'+type);
                        values.forEach(function (value, i) {
                            if (value instanceof HTMLElement) {
                                value = value.dataset['filter'+ucName];
                            }
                            if (value in processed) {
                                return;
                            }
                            var option = document.createElement('li'),
                                label = i in labels ? labels[i] : value,
                                active = false,
                                matches;
                            if ('' === label) {
                                option.innerHTML = '<em>(none)</em>';
                            } else {
                                option.innerText = label;
                            }
                            option.dataset.filter = value;
                            option.setAttribute('title', 1 === (matches = filters.querySelectorAll('[data-filter-'+name+'="'+value+'"]').length) ? 'Matches 1 row' : 'Matches '+matches+' rows');
                            indexed[value] = i;
                            list.appendChild(option);
                            addEventListener(option, 'click', function () {
                                if ('choice' === type) {
                                    filters.querySelectorAll('[data-filter-'+name+']').forEach(function (row) {
                                        if (option.dataset.filter === row.dataset['filter'+ucName]) {
                                            toggleClass(row, 'filter-hidden-'+name);
                                        }
                                    });
                                    toggleClass(option, 'active');
                                } else if ('level' === type) {
                                    if (i === this.parentNode.querySelectorAll('.active').length - 1) {
                                        return;
                                    }
                                    this.parentNode.querySelectorAll('li').forEach(function (currentOption, j) {
                                        if (j <= i) {
                                            addClass(currentOption, 'active');
                                            if (i === j) {
                                                addClass(currentOption, 'last-active');
                                            } else {
                                                removeClass(currentOption, 'last-active');
                                            }
                                        } else {
                                            removeClass(currentOption, 'active');
                                            removeClass(currentOption, 'last-active');
                                        }
                                    });
                                    filters.querySelectorAll('[data-filter-'+name+']').forEach(function (row) {
                                        if (i < indexed[row.dataset['filter'+ucName]]) {
                                            addClass(row, 'filter-hidden-'+name);
                                        } else {
                                            removeClass(row, 'filter-hidden-'+name);
                                        }
                                    });
                                }
                            });
                            if ('choice' === type) {
                                active = null === defaults || 0 <= defaults.indexOf(value);
                            } else if ('level' === type) {
                                active = i <= defaults;
                                if (active && i === defaults) {
                                    addClass(option, 'last-active');
                                }
                            }
                            if (active) {
                                addClass(option, 'active');
                            } else {
                                filters.querySelectorAll('[data-filter-'+name+'="'+value+'"]').forEach(function (row) {
                                    toggleClass(row, 'filter-hidden-'+name);
                                });
                            }
                            processed[value] = true;
                        });

                        if (1 < list.childNodes.length) {
                            filter.appendChild(list);
                            filter.dataset.filtered = '';
                        }
                    });
                }
            };
        })();

        Sfjs.addEventListener(document, 'DOMContentLoaded', function() {
            Sfjs.createTabs();
            Sfjs.createToggles();
            Sfjs.createFilters();
        });

        /*]]>*/</script>

    <script>
        $(document).ready(function() {
            // If the toolbar is also loaded, then toggling won't work as the toggling listeners are attached twice
            // and eventually cancel each other out. We will attach them a third-time so that we get the same behavior
            // as if they were only attached once.
            if ($('#sf-toolbar').length > 0) {
                Sfjs.createToggles();
            }
        });
    </script>
{% endblock %}
